Before submitting this file, make sure that there are no more TODO
placeholders remaining in the file (and remove this comment too).

Q1. Use the above encoding tree to decode the bit sequence `0101100011`.
A1. MOONS

Q2. Prepare a table for the above encoding tree that lists each character with its assigned bit sequence.
Use your table to encode the string `"SONS"`.
A2. 

Character - Bit
O - 1
N - 00
M - 010
S - 011

011100011

Q3. Huffman codes obey the _prefix_ property: no character's encoded bit sequence is a prefix of any other.
What feature of an encoding tree demonstrates that it obeys the prefix property?
A3. An encoding tree only has at most two options at every node, a left or a right, and each node eventually has an ending. Each character can have a unique starting value and length which allows it to be differentiated.

Q4. Flatten the encoding tree above on the right into its sequence of bits (tree shape) and sequence of characters (tree leaves).
A4. 
1101000
NMSO


Q5. Unflatten the sequences `110100100` (tree shape) and `FLERA` (tree leaves) to reconstruct the original encoding tree.
A5. 

				*
			       | |
			     --   --
			    *       * 
			   | |     | |
			   | |     R A
			 --   --     
			F       *    
			       | |   
			     --   --
			    L       E


Q6. Construct a Huffman coding tree for the input `"BOOKKEEPER"`.
A6. 

                                *
			       | |
			     --   --
			    *       * 
			   | |     | |
			   | |     O K
			 --   --     
			*       E
	      	       | |   
		     --   --
		    *       B
	           | |
	         --   --
		P       R           

Q7. Calculate the entropy of your Huffman tree for `"BOOKKEEPER"`.
Confirm that if you had chosen to break ties in a different manner when constructing the tree,
this alternate tree has the same entropy as the optimal result.
A7. 2.5. This is the same if an alternate tree was made with a different order of ties.

Q8. Consider the space of inputs of length 1000 that consists of varied occurrences of 100 distinct characters.
Of those various inputs, contrast which inputs result in a balanced Huffman tree versus those that produce a
very lopsided Huffman tree. As an example, what if each of the 100 characters were represented 10 times
(for a total of 1000 characters)? What would the Huffman tree look like?
What if, instead, 99 of the characters was represented only once, but the remaining character was represented 901 times (again, for a total of 1000 characters)? What would the Huffman tree look like?
Which of the two Huffman trees achieves more significant compression?
What does this tell you about what makes for a "good" versus "bad" Huffman tree?
A8. For the first case, the Huffman tree will look balanced. For the second case, the Huffman tree would be very unbalanced, with the 901 case being on one side of the first node while everything else is on the left side. The second case achieves a more significant compression while the first case does not achieve much more compression. A good Huffman tree is unbalanced while a bad Huffman tree is balanced.